clone_folder: C:\repo

matrix:
  fast_finish: true

environment:
  global:
    DOWNLOAD_DIR: _download_cache
    APPVEYOR_SAVE_CACHE_ON_ERROR: true
    PATH: C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Program Files\Git\cmd;C:\Tools\curl\bin;C:\msys64\usr\bin;C:\Program Files (x86)\Inno Setup 5
  matrix:
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
      VS_VER: "14"
      PLATFORM: "x86"
      PYTHON: C:\Python36\python.exe

build_script:
  - "%PYTHON% --version"
  # Print PATH variable.
  - set PATH
  - for /f %%i in ('%PYTHON% -c "from rednotebook import info; print(info.version)"') do set VERSION=%%i
  - set VERSION
  - cd win

  # Install GTK stack.
  - curl -Lo gtk.tar.gz https://www.dropbox.com/s/1as726i4rb2zmlg/gvsbuild-vs14-x86.tar.gz?dl=1
  - tar -xzf gtk.tar.gz
  - move release C:\gtk
  - set PATH=%PATH%;C:\gtk\bin

  # Install other dependencies.
  - "%PYTHON% -m pip install -U pip wheel"
  - "%PYTHON% -m pip install -r requirements.txt"
  - "%PYTHON% -m pip install C:/gtk/python/pycairo-1.17.1-cp36-cp36m-win32.whl C:/gtk/python/PyGObject-3.28.3-cp36-cp36m-win32.whl"

  # Pyenchant wheels bundle DLLs. The bundled DLLs are incompatible to the
  # DLLs we use and lead to the error "ImportError: DLL load failed: The
  # specified procedure could not be found." when calling "import gi".
  # Therefore, we remove the bundled DLLs and put our own DLLs in the
  # places where pyenchant and PyInstaller expect them.
  - rm C:/Python36/Lib/site-packages/enchant/*.dll
  - rm C:/Python36/Lib/site-packages/enchant/lib/enchant/*.dll
  - cp C:/gtk/bin/libenchant.dll C:/Python36/Lib/site-packages/enchant
  - cp C:/gtk/lib/enchant/libenchant_*.dll C:/Python36/Lib/site-packages/enchant/lib/enchant/

  # Remove bundled dictionaries and install custom ones.
  - rm -r C:/Python36/Lib/site-packages/enchant/share/enchant
  - curl -Lo dicts.tar.gz https://www.dropbox.com/s/f12k20aur6znpmo/myspell-dicts.tar.gz?dl=1
  - tar -xzf dicts.tar.gz
  - move enchant C:\Python36\Lib\site-packages\enchant\share

  # Sanity check with dummy app.
  - "%PYTHON% sampleapp.py"
  - "%PYTHON% -m PyInstaller --debug=all --additional-hooks-dir=. sampleapp.py"
  # Use clean PATH to check that everything has been copied correctly.
  - cmd /C "set PATH=C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem && dist\sampleapp\sampleapp.exe"

  # Create executable.
  - "%PYTHON% -m PyInstaller --workpath=C:/build --distpath=C:/ rednotebook.spec"
  - "%PYTHON% build-translations.py C:/dist/share/locale"
  - tar -czf rednotebook.tar.gz -C /c/ dist

  # Build installer.
  - iscc /Qp /dREDNOTEBOOK_VERSION="%VERSION%" rednotebook.iss

  # Artifacts have to live under "clone_folder".
  - move rednotebook.tar.gz C:\repo
  - move C:\rednotebook.exe C:\repo

artifacts:
  - path: rednotebook.tar.gz
  - path: rednotebook.exe
    name: Windows installer

deploy:
  description: 'Release description'
  provider: GitHub
  auth_token:
    secure: "UT6jPkpy8U/qTN+8LF7hPsJ/cHWlt+7a+wO2Ou2iKYImeBxAV4OY6Gt3Y0v5/ZuL"
  artifact: /rednotebook.exe/
  draft: false
  prerelease: false
  on:
    branch: master
    appveyor_repo_tag: true

cache:
  - '%DOWNLOAD_DIR%'

test: off
